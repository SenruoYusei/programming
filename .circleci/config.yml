# Java Gradle CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-java/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      #- image: circleci/openjdk:8-jdk
      - image: alpine

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #working_directory: ~/repo

    #environment:
      # Customize the JVM maximum heap limit
      #JVM_OPTS: -Xmx3200m
      #TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Echo Test
          command: echo "CircleCI Test"

      # Download and cache dependencies
      #- restore_cache:
          #keys:
            #- v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            #- v1-dependencies-

      #- run: gradle dependencies

      #- save_cache:
          #paths:
            #- ~/.gradle
          #key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      #- run: gradle test
  # deploy ジョブ: EC2 に SSH 接続して、デプロイを実行する
  deploy:
      machine:
          image: circleci/classic:edge
      steps:
          - checkout
          # CircleCI に登録した秘密鍵を呼び出す
          - add_ssh_keys
          # CircleCI に登録した環境変数を使って SSH
          - run: ssh ${USER_NAME}@${HOST_NAME} 'cd /upload/main/WebApplication/shiftCollection && git pull '
      
workflows:
  version: 2
  # build_and_deploy ジョブ: 一番最初に呼ばれるジョブ
  build_and_deploy:
      # build ジョブと deploy ジョブを登録する
      jobs:
          - build
          - deploy:
              requires:
                  # 依存性あるから deploy ジョブより先に build ジョブを実行してね、という命令
                  - build
              # master ブランチに push された場合のみ deploy ジョブを実行する
              filters:
                  branches:
                      only: master
